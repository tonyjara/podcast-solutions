// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id         String    @id @default(cuid())
    active     Boolean   @default(true)
    createdAt  DateTime  @default(now())
    updatedAt  DateTime? @updatedAt
    email      String    @unique
    password   String
    role       Role      @default(user)
    isVerified Boolean   @default(false)

    user User?

    PasswordRecoveryLinks PasswordRecoveryLinks[]
}

model User {
    id        String    @id @default(cuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
    firstName String
    lastName  String
    image     String

    subscription Subscription?
    preferences  Preferences?

    paymentIntents PaymentIntent[]

    accountId      String          @unique
    account        Account         @relation(fields: [accountId], references: [id])
    supportTickets SupportTicket[]
}

model AccountVerificationLinks {
    id               String    @id @default(cuid())
    createdAt        DateTime  @default(now())
    updatedAt        DateTime? @updatedAt
    verificationLink String
    email            String
    hasBeenUsed      Boolean   @default(false)
}

model PasswordRecoveryLinks {
    id           String   @id @default(cuid())
    createdAt    DateTime @default(now())
    recoveryLink String
    email        String
    hasBeenUsed  Boolean  @default(false)
    account      Account? @relation(fields: [accountId], references: [id])
    accountId    String?
}

model Preferences {
    id                String   @id @default(cuid())
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    hasSeenOnboarding Boolean  @default(false)
    selectedPodcastId String

    showTranscriptionWarning Boolean @default(true)

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @unique
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Podcast {
    id            String        @id @default(cuid())
    active        Boolean       @default(true) // can only be deactivated through moderation, affects rss feed
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    publishedAt   DateTime?
    podcastStatus PodcastStatus @default(unpublished)
    name          String
    email         String
    author        String
    slug          String        @unique
    description   String
    categories    String[]
    language      String
    imageUrl      String
    explicit      Boolean
    type          PodcastType   @default(episodic)

    audios         AudioFile[]
    episodes       Episode[]
    subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
    subscriptionId String?
    directories    Directories?
}

// Links from podcasts directories and social media
model Directories {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    websiteUrl   String
    // Social Media
    twitterUrl   String
    facebookUrl  String
    instagramUrl String
    youtubeUrl   String

    // Podcast Directories
    spotifyUrl        String @default("")
    applePodcastsUrl  String @default("")
    googlePodcastsUrl String @default("")
    stitcherUrl       String @default("")
    tuneinUrl         String @default("")
    pocketCastsUrl    String @default("")
    overcastUrl       String @default("")
    castroUrl         String @default("")
    castboxUrl        String @default("")
    podchaserUrl      String @default("")
    deezerUrl         String @default("")
    podfriendUrl      String @default("")
    amazonMusicUrl    String @default("")
    podcastAddictUrl  String @default("")
    breakerUrl        String @default("")
    radiopublicUrl    String @default("")

    podcast   Podcast @relation(fields: [podcastId], references: [id])
    podcastId String  @unique
}

model Episode {
    id                  String        @id @default(cuid())
    createdAt           DateTime      @default(now())
    updatedAt           DateTime      @updatedAt
    releaseDate         DateTime?
    title               String
    showNotes           String
    transcription       String
    imageUrl            String
    explicit            Boolean
    status              EpisodeStatus @default(draft)
    seasonNumber        Int
    episodeNumber       Int
    episodeType         EpisodeType   @default(full)
    selectedAudioFileId String?
    keywords            String        @default("")

    audioFiles   AudioFile[]
    chatMessages EpisodeChat[]

    subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
    subscriptionId String?
    podcast        Podcast       @relation(fields: [podcastId], references: [id])
    podcastId      String
}

model EpisodeChat {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    role      String
    content   String

    episode   Episode? @relation(fields: [episodeId], references: [id])
    episodeId String?
}

model AudioFile {
    id           String   @id @default(cuid())
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    name         String
    blobName     String
    url          String
    isHostedByPS Boolean  @default(true)
    isSelected   Boolean  @default(false)
    length       Int //file size in bytes
    duration     Int //in seconds
    type         String   @default("audio/mpeg") //mp3

    episode        Episode       @relation(fields: [episodeId], references: [id], onDelete: Cascade)
    episodeId      String
    podcast        Podcast       @relation(fields: [podcastId], references: [id], onDelete: Cascade)
    podcastId      String
    subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
    subscriptionId String?
    peaks          Float[]

    @@unique([blobName, subscriptionId])
}

//One row per user, if the user signed up after the 28th then move to the first of each month
model Subscription {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    active      Boolean
    isFreeTrial Boolean  @default(false)
    type        PlanType @default(FREE)

    stripeCustomerId     String?
    stripeSubscriptionId String?
    creditActions        SubscriptionCreditsActions[]
    subscriptionItems    SubscriptionItem[]

    eventCancellationId String?
    cancellAt           DateTime?
    cancelledAt         DateTime?

    audios   AudioFile[]
    podcasts Podcast[]
    episodes Episode[]
    coupons  Coupons[]

    user      User     @relation(fields: [userId], references: [id])
    userId    String   @unique
    product   Product? @relation(fields: [productId], references: [id])
    productId String?
}

model Coupons {
    id             String    @id @default(cuid())
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt
    couponCode     String    @unique @default(cuid())
    hasBeenClaimed Boolean   @default(false)
    claimedAt      DateTime?
    expirationDate DateTime?

    chatInputCredits     Int @default(0)
    chatOutputCredits    Int @default(0)
    transcriptionMinutes Int @default(0)

    subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
    subscriptionId String?
}

// This is based on stripe products
model Product {
    id          String   @id @default(cuid())
    active      Boolean  @default(true)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    features    String
    payAsYouGo  String
    sortOrder   String
    description String
    name        String
    planType    PlanType @default(FREE)

    subscriptions Subscription[]

    prices Price[]
}

model Price {
    id                  String         @id @default(cuid())
    active              Boolean
    createdAt           DateTime       @default(now())
    updatedAt           DateTime       @updatedAt
    nickName            String
    sortOrder           String
    currency            String
    unit_amount_decimal String
    interval            String
    tag                 StripePriceTag

    subscriptionItems SubscriptionItem[]

    productId String
    product   Product @relation(fields: [productId], references: [id])
}

model SubscriptionItem {
    id        String         @id @default(cuid())
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt
    active    Boolean
    priceTag  StripePriceTag

    subscription         Subscription? @relation(fields: [subscriptionId], references: [id])
    subscriptionId       String?
    stripeSubscriptionId String?
    price                Price?        @relation(fields: [priceId], references: [id])
    priceId              String?
}

model PaymentIntent {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    stripeProductId     String
    unit_amount_decimal String

    validatedByWebhook     Boolean   @default(false)
    validatedBySuccessPage Boolean   @default(false)
    confirmedByWebhookAt   DateTime?
    confirmationEventId    String?

    user   User?   @relation(fields: [userId], references: [id])
    userId String?
}

// Are billed monthly
model SubscriptionCreditsActions {
    //auto incrementing id
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    currentAmount Decimal        @default(0) @db.Decimal(19, 4)
    prevAmount    Decimal        @default(0) @db.Decimal(19, 4)
    amount        Decimal        @default(0) @db.Decimal(19, 4)
    tag           StripePriceTag

    subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
    subscriptionId String?
}

model FeatureFlags {
    id                   String  @id @default(cuid())
    signupEnabled        Boolean @default(true)
    rssEnabled           Boolean @default(true)
    transcriptionEnabled Boolean @default(true)
    chatEnabled          Boolean @default(true)
    maintenance          Boolean @default(false)
}

model SupportTicket {
    id        Int                   @id @default(autoincrement())
    createdAt DateTime              @default(now())
    updatedAt DateTime              @updatedAt
    email     String
    subject   String
    message   String
    status    SupportTicketStatus
    priority  SupportTicketPriority
    type      SupportTicketType
    imageUrl  String?
    imageName String?

    userId String
    user   User   @relation(fields: [userId], references: [id])
}

model Logs {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    message   String
    level     String
    eventId   String
}

enum SupportTicketPriority {
    low
    medium
    high
    unsorted
}

enum SupportTicketStatus {
    open
    closed
    inProgress
}

enum SupportTicketType {
    question
    bug
    featureRequest
    unsorted
}

enum Role {
    admin
    user
    mod
    support
}

enum EpisodeStatus {
    published
    draft
    archived
}

enum PodcastStatus {
    published
    unpublished
    archived
    private
    unlisted
}

enum PodcastType {
    episodic
    serial
}

enum EpisodeType {
    full
    trailer
    bonus
}

enum StripePriceTag {
    PLAN_FEE
    TRANSCRIPTION_MINUTE
    CHAT_INPUT
    CHAT_OUTPUT
    STORAGE_PER_GB
}

enum StripeInterval {
    month
    year
}

enum PlanType {
    TRIAL
    FREE
    HOBBY
    BASIC
    PRO
}
